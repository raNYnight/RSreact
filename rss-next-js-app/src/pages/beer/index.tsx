import { fetchBySearch } from '@/api/api';
import { BASE_ITEM_PER_PAGE, BASE_PAGE } from '@/components/constants';
import RootLayout from '@/components/layout';
import PaginationSection from '@/components/pagination-section';
import ResultsSection, { Beer } from '@/components/result-section';
import SearchSection from '@/components/search-section';
import styles from '@/styles/Home.module.css';
import { GetServerSideProps } from 'next';
import { Inter } from 'next/font/google';
import Head from 'next/head';
import { ParsedUrlQuery } from 'querystring';
import { NextPageWithLayout } from '../_app';
import DetailedBeerLayout from '@/components/DetailedBeerLayout';
import ResultsLayout from '@/components/ResultsLayout';
const inter = Inter({ subsets: ['latin'] });

interface BeerGSSProps {
  fetchedBeers: Beer[];
  // detailedBeer: DetailedBeerData | null;
}

export interface Query extends ParsedUrlQuery {
  page?: string;
  per_page?: string;
  search?: string;
  details?: string;
}

// export const getServerSideProps: GetServerSideProps<Props, Query> = async ({ query }) => {
//   const page = typeof query.page === 'string' ? query.page : BASE_PAGE.toString();
//   const itemPerPage = typeof query.per_page === 'string' ? query.per_page : BASE_ITEM_PER_PAGE;
//   const search = Array.isArray(query.search) ? query.search.join('_') : query.search || '';
//   const detailedBeerID = query.details ? parseInt(query.details as string, 10) : null;

//   try {
//     const [fetchedBeers, detailedBeer] = await Promise.all([
//       fetchBySearch(search, page, itemPerPage),
//       detailedBeerID ? fetchDetailedBeer(detailedBeerID) : fetchDetailedBeer(),
//     ]);

//     return {
//       props: { fetchedBeers, detailedBeer },
//     };
//   } catch (error) {
//     console.error(error);

//     return {
//       props: { fetchedBeers: [], detailedBeer: null },
//     };
//   }
// };

export const getServerSideProps: GetServerSideProps<BeerGSSProps, Query> = async ({ query }) => {
  const page = typeof query.page === 'string' ? query.page : BASE_PAGE.toString();
  const itemPerPage = typeof query.per_page === 'string' ? query.per_page : BASE_ITEM_PER_PAGE;
  const search = Array.isArray(query.search) ? query.search.join('_') : query.search || '';

  try {
    const fetchedBeers = await fetchBySearch(search, page, itemPerPage);

    return {
      props: { fetchedBeers },
    };
  } catch (error) {
    console.error(error);

    return {
      props: { fetchedBeers: [] },
    };
  }
};

const BeerPage: NextPageWithLayout<BeerGSSProps> = ({ fetchedBeers }) => {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
        <link
          rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"
        ></link>
      </Head>
      <ResultsSection fetchedBeers={fetchedBeers} />
    </>
  );
};

// BeerPage.getLayout = (page) => {
//   return (
//     <RootLayout>
//       <ResultsLayout>{page}</ResultsLayout>
//     </RootLayout>
//   );
// };

// export default BeerPage;
